name: build-python-wheels

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version:
          - '3.10'
          - '3.11'
          - '3.12'
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - universal2-apple-darwin
    steps:
      - name: Check out the main repository
        uses: actions/checkout@v4

      - name: Check out regorus code
        uses: actions/checkout@v4
        with:
          repository: microsoft/regorus
          path: .
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust target (only for real Rust triples)
        if: matrix.target != 'universal2-apple-darwin'
        run: rustup target add ${{ matrix.target }}

      - name: Build wheels
        uses: PyO3/maturin-action@63b75c597b83e247fbf4fb7719801cc4220ae9f3 # v1.43.0
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --manifest-path bindings/python/Cargo.toml --strip
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}-py${{ matrix.python-version }}
          path: dist

  llinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.10'
          - '3.11'
          - '3.12'
        manylinux:
          - manylinux_2014
          - manylinux_2_34
    container:
      image: quay.io/pypa/${{ matrix.manylinux }}_x86_64
      options: --privileged  # Required for running auditwheel and QEMU

    steps:
      - name: Install system dependencies
        run: |
          yum install -y git gcc gcc-c++ make openssl-devel
          curl -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup show

      - name: Check out the main repository
        uses: actions/checkout@v4

      - name: Check out regorus code
        uses: actions/checkout@v4
        with:
          repository: microsoft/regorus
          path: .
          ref: main

      - name: Set up Python ${{ matrix.python-version }}
        run: |
          /opt/python/cp${{ matrix.python-version//./ }}-*/bin/pip install --upgrade pip setuptools wheel

      - name: Build wheels with maturin
        uses: PyO3/maturin-action@63b75c597b83e247fbf4fb7719801cc4220ae9f3
        with:
          target: x86_64-unknown-linux-gnu
          args: --release --out dist --manifest-path bindings/python/Cargo.toml --strip
          manylinux: ${{ matrix.manylinux }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-x86_64-${{ matrix.manylinux }}-py${{ matrix.python-version }}
          path: dist
       
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version:
          - '3.10'
          - '3.11'
          - '3.12'
        include:
          - target: x86_64-pc-windows-msvc
            python-arch: x64
          - target: i686-pc-windows-msvc
            python-arch: x86

    steps:
      - name: Check out the main repository
        uses: actions/checkout@v4

      - name: Check out regorus code
        uses: actions/checkout@v4
        with:
          repository: microsoft/regorus
          path: .
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python-arch }}

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build Python extension
        run: |
          cargo fetch
          cargo clippy --all-targets --no-deps -- -Dwarnings
          cargo build --release --target ${{ matrix.target }} --frozen
        working-directory: bindings/python

      - name: Build wheels
        uses: PyO3/maturin-action@63b75c597b83e247fbf4fb7719801cc4220ae9f3 # v1.43.0
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --manifest-path bindings/python/Cargo.toml --frozen --strip
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}-py${{ matrix.python-version }}
          path: dist

  release:
    runs-on: ubuntu-latest
    needs: [linux, macos, windows]
    steps:
      - name: Check out the main repository
        uses: actions/checkout@v4

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Flatten wheel files
        run: |
          mkdir -p flat_dist
          find dist -name '*.whl' -exec cp {} flat_dist/ \;
        shell: bash

      - name: Zip wheels
        run: |
          zip -j flat_dist/wheels.zip flat_dist/*.whl

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}  # or pass a custom tag variable here
          name: Release ${{ github.ref_name }}
          body: |
            Wheels for ${{ github.ref_name }}
          files: flat_dist/wheels.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}